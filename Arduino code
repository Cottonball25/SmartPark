#include <SPI.h>
#include <WiFiS3.h> // For Arduino UNO R4 Wi-Fi
#include <ArduinoJson.h>  

// Wi-Fi credentials
const char* ssid = "DIAemo!23";
const char* password = "M105QJO3E10";

// Web server
WiFiServer server(80);

// Ultrasonic sensor pins
const int trigPin1 = A2;
const int echoPin1 = A3;
const int trigPin2 = A4;
const int echoPin2 = A5;

// Parking space data
String parkingSpace1Status = "Available";
String parkingSpace2Status = "Available";

// Function Prototypes
void sendResponse(WiFiClient &client, const String &response, const String &status = "200 OK");
void handleRoot(WiFiClient &client);
void handleParkCar(WiFiClient &client);
void handleRetrieveCar(WiFiClient &client);
void handleNotFound(WiFiClient &client);

// Function to measure distance using the ultrasonic sensor
long getDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  long distance = duration * 0.034 / 2; // Convert to cm
  return distance;
}

void setup() {
  // Serial for debugging
  Serial.begin(115200);

  // Ultrasonic sensor pin modes
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);

  // Connect to Wi-Fi
  while (WiFi.begin(ssid, password) != WL_CONNECTED) {
    Serial.println("Connecting to WiFi...");
    delay(1000);
  }
  Serial.println("Connected to WiFi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Start the server
  server.begin();
}

void loop() {
  // Measure parking space availability
  long distance1 = getDistance(trigPin1, echoPin1);
  long distance2 = getDistance(trigPin2, echoPin2);

  // Update parking space status based on sensor readings
  if (distance1 > 10) {
    parkingSpace1Status = "Available";
  } else {
    parkingSpace1Status = "Occupied";
  }

  if (distance2 > 10) {
    parkingSpace2Status = "Available";
  } else {
    parkingSpace2Status = "Occupied";
  }

  // Listen for incoming clients
  WiFiClient client = server.available();
  if (client) {
    String request = client.readStringUntil('\r');
    Serial.println("Received Request: " + request); // Debug output
    client.flush();

    // Ensure proper request handling
    if (request.indexOf("GET / ") >= 0 || request.indexOf("GET / HTTP/1.1") >= 0) {
      handleRoot(client);
    } else if (request.indexOf("/park") >= 0) {
      handleParkCar(client);
    } else if (request.indexOf("/retrieve") >= 0) {
      handleRetrieveCar(client);
    } else {
      handleNotFound(client);
    }

    // Properly close the client connection for smooth disconnection
    delay(1);
    client.stop();
    delay(100);  
  }
}

// Handle the endpoint
void handleRoot(WiFiClient &client) {
  String response = "Welcome to the Parking Kiosk Server! Available endpoints: /park, /retrieve";
  sendResponse(client, response); // Use the sendResponse function
  Serial.println("Root request received");
}

// Handle 'park' endpoint
void handleParkCar(WiFiClient &client) {
  String response;
  if (parkingSpace1Status == "Available") {
    response = "Parking spot 1 is available.";
  } else if (parkingSpace2Status == "Available") {
    response = "Parking spot 2 is available.";
  } else {
    response = "No parking spots available.";
  }

  sendResponse(client, response); // Use the sendResponse function
  Serial.println(response);
}

// Handle 'retrieve' endpoint
void handleRetrieveCar(WiFiClient &client) {
  String response = "Car retrieval initiated!";
  sendResponse(client, response); // Use the sendResponse function
  Serial.println("Retrieve request received");
}

// Handle not found
void handleNotFound(WiFiClient &client) {
  String response = "404 Not Found: The requested resource does not exist.";
  sendResponse(client, response, "404 Not Found"); // Use the sendResponse function
  Serial.println("404 Not Found");
}

// Send an HTTP response
void sendResponse(WiFiClient &client, const String &response, const String &status) {
  client.println("HTTP/1.1 " + status);
  client.println("Content-Type: text/plain");
  client.println("Connection: close");
  client.println();
  client.println(response);
}
